
import random
from telebot import types
from MenuBot import goto_menu
import json
import os

activeGames = {}

def newgame(chatID, newGame):
    activeGames.update({chatID: newGame})
    return newGame

def getgame(chatID):
    return activeGames.get(chatID)

def stopgame(chatID):
    activeGames.pop(chatID)

if_heroku = ""

if os.environ.get('HEROKU'):
    if_heroku = "Games/"

class Translation:
    """
    –ö–ª–∞—Å—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.
    """
    __players = {}
    __menu_translation_path = f'{if_heroku}Translations/menu.json'
    __slots_translation_path = f'{if_heroku}Translations/slots.json'
    __xo_translation_path = f'{if_heroku}Translations/xo.json'
    __bj_translation_path = f'{if_heroku}Translations/bj.json'
    __hm_translation_path = f'{if_heroku}Translations/hangman.json'
    __dating_translation_path = f'{if_heroku}Translations/dating.json'
    __tora_translation_path = f'{if_heroku}Translations/TorA.json'

    @classmethod
    def get_menu_expression(cls, key: str, user_id: int) -> str:
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ menu.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        if user_id not in cls.__players:
            cls.set_lang(user_id)

        with open(cls.__menu_translation_path, "r", encoding="utf8") as read:
            return json.load(read)[key][cls.__players[user_id]]

    @classmethod
    def get_dating_menu_expression(cls, key, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è menu –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ dating.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__dating_translation_path, "r", encoding="utf8") as read:
            return json.load(read)["menu"][key][cls.get_player_language(user_id)]

    @classmethod
    def get_dating_log_expression(cls, key):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è log –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ dating.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__dating_translation_path, "r", encoding="utf8") as read:
            return json.load(read)["log"][key]

    @classmethod
    def get_tora_true_dict(cls):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è true –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ TorA.json.

        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__tora_translation_path, "r", encoding="utf8") as read:
            return json.load(read)['true']

    @classmethod
    def get_tora_action_dict(cls):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è action –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ TorA.json.

        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__tora_translation_path, "r", encoding="utf8") as read:
            return json.load(read)['action']

    @classmethod
    def get_tora_menu_expression(cls, key, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è menu –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ TorA.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__tora_translation_path, "r", encoding="utf8") as read:
            return json.load(read)['menu'][key][cls.get_player_language(user_id)]

    @classmethod
    def get_bj_expression(cls, key, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ bj.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__bj_translation_path, "r", encoding="utf8") as read:
            return json.load(read)[key][cls.get_player_language(user_id)]

    @classmethod
    def get_slots_menu_expression(cls, key, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ slots.json –ø–æ –∫–ª—é—á—É.

        :param key: –ö–ª—é—á.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –í—ã—Ä–∞–∂–µ–Ω–∏–µ.
        """
        with open(cls.__slots_translation_path, "r", encoding="utf8") as read:
            return json.load(read)[key][cls.get_player_language(user_id)]

    @classmethod
    def get_player_language(cls, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–≥—Ä–æ–∫–∞.

        :param user_id: ID –∏–≥—Ä–æ–∫–∞.
        :return: –Ø–∑—ã–∫.
        """
        if user_id not in cls.__players:
            cls.__players[user_id] = 0
        return cls.__players[user_id]

    @staticmethod
    def switch_language(user_id):
        """
        –ú–µ—Ç–æ–¥ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞.

        :param user_id: ID –∏–≥—Ä–æ–∫–∞.
        """
        if user_id in Translation.__players:
            if Translation.__players[user_id] == 0:
                Translation.__players[user_id] = 1
            else:
                Translation.__players[user_id] = 0

    @classmethod
    def set_lang(cls, user_id):
        """
        –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if user_id not in cls.__players:
            cls.__players[user_id] = 0
        else:
            cls.__players[user_id] = 1

    @classmethod
    def set_language(cls, user_id, lang):
        """
        –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ (—É–ª—É—á—à–µ–Ω–Ω—ã–π).

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param lang: –Ø–∑—ã–∫.
        """
        cls.__players[user_id] = lang

    @classmethod
    def get_language(cls, user_id):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω—ã–π).

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –Ø–∑—ã–∫
        """
        return cls.__players[user_id]


class Slots:
    """
    –ö–ª–∞—Å—Å –∏–≥—Ä—ã –°–ª–æ—Ç—ã.
    """
    @property
    def flag(self):
        """
        –ì–µ—Ç—Ç–µ—Ä —Ñ–ª–∞–≥–∞.

        :return: –§–ª–∞–≥.
        """
        return self.__flag

    # –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @staticmethod
    def main_slots(call, bot):
        """
        –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ "Slots".

        :param call: –í—ã–∑–æ–≤.
        :param bot: –ë–æ—Ç.
        """
        markup = types.InlineKeyboardMarkup(row_width=3)
        b = types.InlineKeyboardButton(Translation.get_slots_menu_expression("spin", call.from_user.id),
                                       callback_data='spin')
        markup.add(b)
        bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=markup,
                              text=Translation.get_slots_menu_expression("slots", call.from_user.id),
                              message_id=call.message.message_id)

    @classmethod
    def callback_inline(cls, call, bot):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –í—ã–∑–æ–≤–æ–≤.

        :param call: –í—ã–∑–æ–≤.
        :param bot: –ë–æ—Ç.
        """
        cls.__flag = True

        if call.data == "Slots":
            cls.main_slots(call, bot)
            return

        # –ö–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "Play Slots" –≤ –º–µ–Ω—é (—Å–∞–º–∞ –∏–≥—Ä–∞ "–°–ª–æ—Ç-–ú–∞—à–∏–Ω–∞")
        if call.data == 'spin':
            i = 0
            array = []

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –≤—ã–∏–≥—Ä—ã—à
            while i < 9:
                array.append(random.randint(0, 4))
                i = i + 1
            new_array = []
            i = 0

            # –ó–∞–º–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            while i < 9:
                if array[i] == 0:
                    new_array.append("7Ô∏è‚É£")
                elif array[i] == 1:
                    new_array.append("üçí")
                elif array[i] == 2:
                    new_array.append("üçã")
                elif array[i] == 3:
                    new_array.append("üçé")
                elif array[i] == 4:
                    new_array.append("üçâ")
                i += 1

            # –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "Slots: ")
            bot.edit_message_text(chat_id=call.message.chat.id, reply_markup=None, text=call.message.text,
                                  message_id=call.message.message_id)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ "Spin!" –∏ "Exit" –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            markup = types.InlineKeyboardMarkup(row_width=3)
            b1 = types.InlineKeyboardButton(Translation.get_slots_menu_expression("spin", call.from_user.id),
                                            callback_data='spin')
            b2 = types.InlineKeyboardButton(Translation.get_slots_menu_expression("exit", call.from_user.id),
                                            callback_data='Menu')
            markup.add(b1, b2)

            # –ö—Ä–µ–ø–ª–µ–Ω–∏–µ inline-–º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ "Spin!" –∏ "Exit") –∏ –≤—ã–≤–æ–¥ —Å–ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


def get_text_messages(bot, cur_user, message):
    chatID = message.chat.id
    ms_text = message.text

    if ms_text == "–ò–≥—Ä–∞—Ç—å":

    elif ms_text == "–°—Ç–æ–ø!":
        stopgame(chatID)
        goto_menu(bot, chatID, "–í—ã—Ö–æ–¥")
        return